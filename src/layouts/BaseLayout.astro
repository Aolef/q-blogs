---
import Header from '../components/Header.astro';
// import Footer from '../components/Footer.astro';
import '../styles/global.css';
import BlogCard from '../components/BlogCard.astro';
import Footer from "../components/Footer.astro";
const { pageType } = Astro.props
const pageTitle = "图图的博客";
---
<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <!-- <meta name="generator" content={Astro.generator} /> -->
    <title>{pageTitle}</title>
    <style>
        .layout {
            height: 100%;
            overflow: auto;
        }
        .layout-content {
            background: linear-gradient(135deg, #2d3748, #4a5568);
            color: #edf2f7;
        }
        /* 动态背景粒子效果 */
        #particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
    </style>
</head>



<body>
    <div class="layout">
        <div class="layout-header">
            <Header pageType={pageType}></Header>
        </div>
        <div class="layout-content min-h-full">
            <!-- 粒子背景 -->
            <canvas id="particles"></canvas>
            <slot></slot>
        </div>
        <div class="layout-footer">
            <Footer></Footer>
        </div>
    </div>
<script>
    // import "../scripts/menu.js";

    // 粒子背景效果
    const canvas = document.getElementById("particles") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    const particlesArray: Particle[] = [];
    class Particle {
        x: number;
        y: number;
        size: number;
        speedX: number;
        speedY: number;
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.size = Math.random() * 3 + 1;
            this.speedX = Math.random() * 2 - 1;
            this.speedY = Math.random() * 2 - 1;
        }
        update() {
            this.x += this.speedX;
            this.y += this.speedY;
            if (this.size > 0.2) this.size -= 0.05;
        }
        draw() {
            ctx.fillStyle = "rgba(59, 130, 246, 0.5)";
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
        }
    }
    function initParticles() {
        for (let i = 0; i < 100; i++) {
            particlesArray.push(new Particle());
        }
    }
    function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = 0; i < particlesArray.length; i++) {
            particlesArray[i].update();
            particlesArray[i].draw();
            if (particlesArray[i].size <= 0.2) {
                particlesArray.splice(i, 1);
                i--;
                particlesArray.push(new Particle());
            }
        }
        requestAnimationFrame(animateParticles);
    }
    initParticles();
    animateParticles();
    window.addEventListener("resize", () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

</script>
</body>
</html>